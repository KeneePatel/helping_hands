name: CI/CD for Application Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
  workflow_dispatch:
    description: "Trigger workflow for manual CI/CD push"

jobs:
  cicd:
    name: CI/CD for Application
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set Up SSH Keys
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub

    - name: Azure CLI Login with Service Principal
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      run: |
        client_id=$(echo $AZURE_CREDENTIALS | jq -r .clientId)
        client_secret=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        tenant_id=$(echo $AZURE_CREDENTIALS | jq -r .tenantId)
        subscription_id=$(echo $AZURE_CREDENTIALS | jq -r .subscriptionId)

        az login --service-principal -u $client_id -p $client_secret --tenant $tenant_id
        az account set --subscription $subscription_id

    - name: Initialize Terraform
      run: terraform init -reconfigure
      working-directory: terraform

    - name: Get ACR Login Server
      id: get-acr
      run: |
        echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_ENV
      working-directory: terraform

    - name: Build Docker Images - Frontend and Backend
      run: |
        docker buildx build --platform linux/amd64 -t ${{ env.acr_login_server }}/frontend:latest ./frontend
        docker buildx build --platform linux/amd64 -t ${{ env.acr_login_server }}/backend:latest ./backend

    - name: Login to ACR
      env:
        ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
        ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      run: |
        echo "${{ env.ACR_PASSWORD }}" | docker login ${{ env.acr_login_server }} -u ${{ env.ACR_USERNAME }} --password-stdin

    - name: Push Docker Images to ACR
      run: |
        docker push ${{ env.acr_login_server }}/frontend:latest
        docker push ${{ env.acr_login_server }}/backend:latest

    - name: SSH into Azure VM and Deploy Docker Containers
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ secrets.VM_PUBLIC_IP }} <<EOF
          docker pull ${{ env.acr_login_server }}/frontend:latest
          docker pull ${{ env.acr_login_server }}/backend:latest

          # Stop and remove any existing containers
          docker stop frontend || true && docker rm frontend || true
          docker stop backend || true && docker rm backend || true

          # Run the updated Docker containers
          docker run -d --name frontend -p 3000:3000 ${{ env.acr_login_server }}/frontend:latest
          docker run -d --name backend -p 8080:8080 ${{ env.acr_login_server }}/backend:latest
        EOF

